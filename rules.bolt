isUser(uid) { auth != null && auth.uid == uid; }

type Device {
  validate() { this.type == 'ios' || 'android' || 'web' }
  name: String,
  gcmId: String,
  type: String
}

type User {
  country: String,
  cur_group: String,
  display_name: String | Null,
  ext_url: String,
  email: String,
  id: String,
  image_url:String,
  online: Boolean,
  product: String,
  type: String,
  uri: String
}

type Track {
  added: Number,
  album: String,
  albumArtSmall: String,
  artist: String,
  key: String,
  lengthMs: Number,
  nowPlaying: Boolean | Null,
  songId: String,
  title: String,
  uri: String
}

type Participant {
  active: Boolean,
  displayName: String,
  spotifyId: String,
  extUrl: String,
  imageUrl: String
}

type Security {
  validate() { this.type == 'invite' || 'password' }
  type: String,
  password: String | Null
}

type Queuegroup {
  created: Number,
  leader: String,
  name: String,
  security: Security | Null,
  participants: Map<String, Boolean|String>,
  invites: Map<String, Boolean>,
  tracks: Map<String, Track>,
  pastTracks: Map<String, Track>
}

path /users/{$userId} is User {
  read() = isUser($userId);
  write() = isUser($userId);
}

path /participants/{$userId} is Participant {
  read() { true }
  write() { isUser($userId) }
}

path /queuegroups/{$id}/tracks {
  write() { prior(root.queuegroups[$id].participants[auth.uid]) != null }
  read() { root.queuegroups[$id].participants[auth.uid] != null }
}

path /queuegroups/{$id}/participants/{$key1} {
  write() { key()==auth.uid &&
            (prior(root.queuegroups[$id].security) == null ?
              true : (prior(root.queuegroups[$id].security.type) == 'invite' ?
                prior(root.queuegroups[$id].invites[key()]) != null : (prior(root.queuegroups[$id].security.type) == 'password' ?
                  this == prior(root.queuegroups[$id].security.password) : false)))}
  read() { key()==auth.uid || auth.uid==prior(root.queuegroups[$id].leader) }
}

path /queuegroups/{$id} is Queuegroup;
