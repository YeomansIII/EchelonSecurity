isUser(uid) { auth != null && auth.uid == uid }
doesNotYetExist() { prior(this) == null }

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type Progress extends Number {
  validate() { this >= 0 && this <= 100 }
}

type StateTimestamp extends Number {
  validate() { this == now || prior(this) == this }
}

type WholeNumber extends Number {
  validate() { this >= 0 }
}

type Device {
  validate() { this.gcmId == key() && (this.type == 'ios' || this.type == 'android' || this.type == 'web') }
  name: String,
  added: CurrentTimestamp,
  lastActive: CurrentTimestamp,
  gcmId: String,
  type: String
}

type User {
  country: String,
  cur_group: String,
  cur_group_visible: Boolean,
  display_name: String | Null,
  ext_url: String,
  email: String,
  id: String,
  image_url:String,
  online: Boolean,
  product: String,
  type: String,
  uri: String,
  devices: Map<String, Device>,
  friends: Map<String, Boolean>
}

type Track {
  added: CurrentTimestamp,
  album: String,
  albumArtSmall: String,
  artist: String,
  key: String,
  lengthMs: Number,
  nowPlaying: Boolean | Null,
  songId: String,
  title: String,
  uri: String
}

/*type Participant {
  active: Boolean,
  displayName: String,
  spotifyId: String,
  extUrl: String,
  imageUrl: String
}*/

type Security {
  validate() { this.type == 'invite' || this.type == 'password' }
  type: String,
  password: String | Null
}

type Queuegroup {
  validate() { this.name == key() }
  created: CurrentTimestamp,
  leader: String,
  name: String,
  security: Security | Null,
  participants: Map<String, Boolean|String>,
  invites: Map<String, Boolean> | Null,
  tracks: Map<String, Track> | Null,
  pastTracks: Map<String, Track> | Null
}

type ErrorDetails {
  error: String,
  error_stack: String,
  previous_state: String,
  original_task: Any,
  attempts: WholeNumber
}

type QueueInvite {
  _state: String,
  _state_changed: StateTimestamp,
  _owner: String,
  _progress: Progress,
  _error_details: ErrorDetails,
  _id: String,
  groupName: String,
  inviter: String,
  invitee: String
}

type QueueSpec {
  start_state: String | Null,
  in_progress_state: String,
  finished_state: String | Null,
  error_state: String | Null,
  timeout: WholeNumber | Null
}

path /queue/invites/{$queueInvite} is QueueInvite {
  index() {["_state"]}
  read() { auth.canProcessTasks == true }
  create() { auth != null || auth.canProcessTasks == true}
  update() { auth.canProcessTasks == true }
  delete() { auth.canProcessTasks == true }
}

path /users/{$userId} is User {
  read() { isUser($userId) }
  write() { isUser($userId) }
}

path /users/{$userId}/cur_group {
  read() { auth != null && this.parent().cur_group_visible }
}

path /users/{$userId}/display_name {
  read() { auth != null }
}

path /users/{$userId}/ext_url {
  read() { auth != null }
}

path /users/{$userId}/id {
  read() { auth != null }
}

path /users/{$userId}/image_url {
  read() { auth != null }
}

path /users/{$userId}/online {
  read() { auth != null }
}

path /users/{$userId}/uri {
  read() { auth != null }
}

path /queuegroups/{$id} is Queuegroup {
  create() { true }
  update() { auth.uid==prior(root.queuegroups[$id].leader) }
  delete() { auth.uid==prior(root.queuegroups[$id].leader) }
  read() { root.queuegroups[$id].participants[auth.uid] != null }
}

path /queuegroups/{$id}/leader {
  write() { auth.uid==prior(root.queuegroups[$id].leader) }
}

path /queuegroups/{$id}/name {
  write() { auth.uid==prior(root.queuegroups[$id].leader) }
}

path /queuegroups/{$id}/tracks {
  write() { prior(root.queuegroups[$id].participants[auth.uid]) != null }
}

path /queuegroups/{$id}/invites {
  write() { prior(root.queuegroups[$id].participants[auth.uid]) != null }
  read() { auth != null }
}

path /queuegroups/{$id}/pastTracks {
  write() { auth.uid==prior(root.queuegroups[$id].leader) }
}

path /queuegroups/{$id}/participants/{$key3} {
  write() { key()==auth.uid &&
            (prior(root.queuegroups[$id].security) == null ?
              true : (prior(root.queuegroups[$id].security.type) == 'invite' ?
                prior(root.queuegroups[$id].invites[key()]) != null : (prior(root.queuegroups[$id].security.type) == 'password' ?
                  this == prior(root.queuegroups[$id].security.password) : false)))}
  read() { key()==auth.uid || auth.uid==prior(root.queuegroups[$id].leader) }
}
