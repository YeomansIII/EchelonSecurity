isUser(uid) { auth != null && auth.uid == uid }

withInitialCondition(ref, exp) { isNew(ref) && exp }

isNew(ref) { prior(ref) == null }

noChange(ref) { ref == prior(ref) }

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type Progress extends Number {
  validate() { this >= 0 && this <= 100 }
}

type StateTimestamp extends Number {
  validate() { prior(this).parent() == null ? this == now : prior(this) == this }
}

type InitialTimestamp extends Number {
  validate() { noChange(this) || withInitialCondition(this, this == now) }
}

type PositiveNumber extends Number {
  validate() { this >= 0 }
}

type Percent extends Number {
  validate() { this <= 100 }
}

type WholeNumber extends Number {
  validate() { this >= 0 }
}

type Device {
  validate() { (this.type == 'ios' || this.type == 'android' || this.type == 'web') }
  name: String | Null, // a user defined name for the device
  added: Number, // the timestamp that the device was added
  lastActive: Number, // the timestamp of the last time the device was active
  messagingId: String | Null, // the fcm/gcm registration id of the device
  type: String // the type of the device: ios, android, or web
}

type User { // a user object, key is username
  cur_group: String | Null, // the name of the current group the user is in
  cur_group_visible: Boolean | Null, // whether or not other users will be able to see this user's current group
  email: String | Null, // the user's email address
  product: String | Null, // the spotify product
  type: String | Null, // the spotify type
  devices: Map<String, Device> | Null, // a list of the user's devices
  friends: Map<String, Boolean> | Null // a list of the user's friends
}

type Track { // a model for a spotify track
  added: Number, // a timestamp of when the track was added to the list
  album: String, // the name of the track's album
  albumArtSmall: String | Null, // album art small
  albumArtMedium: String | Null, // album art medium
  albumArtLarge: String | Null, // album are large
  artist: String, // artist string
  key: String, // the key in this database
  lengthMs: Number | Null, // the length of the track in milliseconds
  songId: String, // the spotify song id e.g. 2345afd87ad8
  title: String, // the title of the track
  uri: String // the spotify uri of the track, simply a formatted ID e.g. spotify:track:2345afd87ad8
  external_url: String | Null,
  votedUp: Map<String, Boolean> | Null, // a map of the users that have voted up
  votedDown: Map<String, Boolean> | Null // a map of the users that have voted down
}

type Playlist {
  external_url: String,
  followers: Number,
  id: String,
  name: String,
  description: String,
  image: String | Null, // image
  tracks: Map<String, Track> | Null, // list of tracks in the playlist
  type: String,
  uri: String
}

type Participant { // a model for a user's public data
  country: String | Null, // the user's country
  online: Boolean | Null, // whether the user is currently online
  display_name: String | Null, // the user's display name
  friend_code: String | Null, // the user's friend code, this is used so you can still add users when multiple people have the same display name e.e "Jason Yeomans#0001"
  id: String | Null, // the spotify user id for the user e.g. 4983jj34j8934
  ext_url: String | Null, // the spotify web url for the user
  uri: String | Null, // the uri for the user, this is a formatted version of the id e.g. spotify:user:4983jj34j8934
  image_url: String | Null // the url to the user's spotify profile image
}

type Security {
  validate() { this.type == 'invite' || this.type == 'password' }
  type: String,
  password: String | Null
}

type Queuegroup {
  validate() { this.name == key() }
  created: CurrentTimestamp,
  leader: String,
  name: String,
  public: Boolean | Null,
  security: Security | Null,
  defaultPlaylist: Playlist | Null,
  participants: Map<String, Boolean|String>,
  invites: Map<String, Boolean>,
  tracks: Map<String, Track>,
  pastTracks: Map<String, Track>,
  nowPlaying: Track | Null
}

type ErrorDetails {
  error: String,
  error_stack: String,
  previous_state: String,
  original_task: Any,
  attempts: WholeNumber
}

type QueueInvite {
  _state: String | Null,
  _state_changed: InitialTimestamp | Null,
  _owner: String | Null,
  _progress: Percent | Null,
  _error_details: ErrorDetails | Null,
  _id: String | Null,
  group_name: String,
  inviter: String,
  invitee: String,
  inviter_display_name: String
}

type QueueSpec {
  start_state: String | Null,
  in_progress_state: String,
  finished_state: String | Null,
  error_state: String | Null,
  timeout: WholeNumber | Null
}

path /queue/invites/tasks/{$queueInvite} is QueueInvite {
  index() {["_state"]}
  read() { auth.canProcessTasks == true }
  create() { auth != null }
  update() { auth.canProcessTasks == true }
  delete() { auth.canProcessTasks == true }
}

path /display_names/{$displayName} {
  read() { auth != null }
}

path /display_names/{$displayName}/{$friendCode} {
  read() { auth != null }
  write() { isUser(this) || isUser(prior(this)) }
}

path /participants/{$userId} is Participant {
  read() { auth != null }
  write() { isUser($userId) }
}

path /users/{$userId} is User {
  read() { isUser($userId) }
  write() { isUser($userId) }
}

path /users/{$userId}/cur_group {
  read() { auth != null && this.parent().cur_group_visible }
}

path /users/{$userId}/devices {
  read() { auth.canProcessTasks == true }
}

path /queuegroups/{$id} is Queuegroup {
  create() { auth != null }
  update() { auth.uid==prior(root.queuegroups[$id].leader) }
  delete() { auth.uid==prior(root.queuegroups[$id].leader) }
  read() { root.queuegroups[$id].participants[auth.uid] != null }
}

path /queuegroups/{$id}/leader {
  write() { auth.uid==prior(root.queuegroups[$id].leader) }
}

path /queuegroups/{$id}/name {
  write() { auth.uid==prior(root.queuegroups[$id].leader) }
  read() { auth != null }
}

path /queuegroups/{$id}/tracks {
  write() { prior(root.queuegroups[$id].participants[auth.uid]) != null }
}

path /queuegroups/{$id}/invites {
  write() { prior(root.queuegroups[$id].participants[auth.uid]) != null }
  read() { auth != null }
}

path /queuegroups/{$id}/nowPlaying {
  write() { true }
  read() { this.parent().public == true || prior(root.queuegroups[$id].participants[auth.uid]) != null }
}

path /queuegroups/{$id}/pastTracks {
  write() { auth.uid==prior(root.queuegroups[$id].leader) }
}

path /queuegroups/{$id}/participants/{$key4} {
  create() { key()==auth.uid &&
            (prior(root.queuegroups[$id].security) == null ?
              true : (prior(root.queuegroups[$id].security.type) == 'invite' ?
                prior(root.queuegroups[$id].invites[key()]) != null : (prior(root.queuegroups[$id].security.type) == 'password' ?
                  this == prior(root.queuegroups[$id].security.password) : false)))}
  update() { key()==auth.uid || auth.uid==prior(root.queuegroups[$id].leader) }
  delete() { key()==auth.uid || auth.uid==prior(root.queuegroups[$id].leader) }
  read() { this.parent().public == true || prior(root.queuegroups[$id].participants[auth.uid]) != null }
}
